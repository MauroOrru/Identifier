from typing import List, Tuple
from itertools import product
from dfa_examples import DFA

def simulate(dfa: DFA, word: str) -> Tuple[bool, bool]:
    """
    It simulates the DFA on a given word.
    The logic of the return is the following: the first element represents
    if the word is generated by the DFA, and the second element represents
    if the word is accepted by the DFA.
    """
    q = dfa.q0
    for ch in word:
        q_next = dfa.next(q, ch)
        if q_next is None:
            return False, False
        q = q_next
    return True, q in dfa.F


# It generate the set E star 
def all_words(sigma: set[str], max_len: int) -> list[str]:
    words = []

    current_length = 1
    while current_length <= max_len:

        def build_words(current, depth):
            if depth == 0:
                words.append("".join(current))
            else:
                for symbol in sorted(sigma):
                    build_words(current + [symbol], depth - 1)

        build_words([], current_length)
        current_length += 1

    return words

